{"name": "test_orderItem", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\n  (Session info: chrome=123.0.6312.86)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7358A70C2+63090]\n\t(No symbol) [0x00007FF735812D12]\n\t(No symbol) [0x00007FF7356AEC65]\n\t(No symbol) [0x00007FF7356AAC1A]\n\t(No symbol) [0x00007FF73569D514]\n\t(No symbol) [0x00007FF73569E8F8]\n\t(No symbol) [0x00007FF73569D7FF]\n\t(No symbol) [0x00007FF73569D104]\n\t(No symbol) [0x00007FF73569D021]\n\t(No symbol) [0x00007FF73569B0A8]\n\t(No symbol) [0x00007FF73569B8BC]\n\t(No symbol) [0x00007FF7356B14AD]\n\t(No symbol) [0x00007FF735733D67]\n\t(No symbol) [0x00007FF735716FDA]\n\t(No symbol) [0x00007FF735733412]\n\t(No symbol) [0x00007FF735716D83]\n\t(No symbol) [0x00007FF7356E83A8]\n\t(No symbol) [0x00007FF7356E9441]\n\tGetHandleVerifier [0x00007FF735CA262D+4238301]\n\tGetHandleVerifier [0x00007FF735CDF78D+4488509]\n\tGetHandleVerifier [0x00007FF735CD7A6F+4456479]\n\tGetHandleVerifier [0x00007FF735980606+953270]\n\t(No symbol) [0x00007FF73581E5DF]\n\t(No symbol) [0x00007FF7358192B4]\n\t(No symbol) [0x00007FF7358193EB]\n\t(No symbol) [0x00007FF735809C24]\n\tBaseThreadInitThunk [0x00007FFC96F7257D+29]\n\tRtlUserThreadStart [0x00007FFC9920AA58+40]", "trace": "request = <SubRequest 'setup' for <Function test_orderItem>>\n\n    @pytest.fixture(scope=\"class\")\n    def setup(request):\n        global driver\n        browser_name = request.config.getoption(\"browser_name\")\n    \n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            options.add_experimental_option('detach', True)\n            options.add_argument(\"--ignore-certificate-errors\")\n    \n            driver = webdriver.Chrome(options=options)\n    \n        elif browser_name == \"firefox\":\n            driver = webdriver.Firefox()\n    \n        elif browser_name == \"edge\":\n            driver = webdriver.Edge()\n    \n        elif browser_name == \"safari\":\n            driver = webdriver.Safari()\n    \n        elif browser_name == \"IE\":\n            driver = webdriver.Ie()\n    \n        driver.implicitly_wait(5)\n        driver.maximize_window()\n>       driver.get(\"https://rahulshettyacademy.com/angularpractice/\")\n\ntests\\conftest.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000218E5C95E80>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_INTERNET_DISCONNECTED\\\\...07FF735809C24]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC96F7257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC9920AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\nE         (Session info: chrome=123.0.6312.86)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7358A70C2+63090]\nE       \t(No symbol) [0x00007FF735812D12]\nE       \t(No symbol) [0x00007FF7356AEC65]\nE       \t(No symbol) [0x00007FF7356AAC1A]\nE       \t(No symbol) [0x00007FF73569D514]\nE       \t(No symbol) [0x00007FF73569E8F8]\nE       \t(No symbol) [0x00007FF73569D7FF]\nE       \t(No symbol) [0x00007FF73569D104]\nE       \t(No symbol) [0x00007FF73569D021]\nE       \t(No symbol) [0x00007FF73569B0A8]\nE       \t(No symbol) [0x00007FF73569B8BC]\nE       \t(No symbol) [0x00007FF7356B14AD]\nE       \t(No symbol) [0x00007FF735733D67]\nE       \t(No symbol) [0x00007FF735716FDA]\nE       \t(No symbol) [0x00007FF735733412]\nE       \t(No symbol) [0x00007FF735716D83]\nE       \t(No symbol) [0x00007FF7356E83A8]\nE       \t(No symbol) [0x00007FF7356E9441]\nE       \tGetHandleVerifier [0x00007FF735CA262D+4238301]\nE       \tGetHandleVerifier [0x00007FF735CDF78D+4488509]\nE       \tGetHandleVerifier [0x00007FF735CD7A6F+4456479]\nE       \tGetHandleVerifier [0x00007FF735980606+953270]\nE       \t(No symbol) [0x00007FF73581E5DF]\nE       \t(No symbol) [0x00007FF7358192B4]\nE       \t(No symbol) [0x00007FF7358193EB]\nE       \t(No symbol) [0x00007FF735809C24]\nE       \tBaseThreadInitThunk [0x00007FFC96F7257D+29]\nE       \tRtlUserThreadStart [0x00007FFC9920AA58+40]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "attachments": [{"name": "log", "source": "513b9836-b737-4185-a9a5-f5da1d27cf70-attachment.txt", "type": "text/plain"}], "start": 1711968801836, "stop": 1711968801836, "uuid": "54a103c1-3dfc-4384-9c98-85c25102e183", "historyId": "b26f664081a2901a2bbf86b26a106b3c", "testCaseId": "b26f664081a2901a2bbf86b26a106b3c", "fullName": "tests.test_orderItem.TestOrderItem#test_orderItem", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('failure', 'setup')"}, {"name": "tag", "value": "flaky(reruns=3)"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_orderItem"}, {"name": "subSuite", "value": "TestOrderItem"}, {"name": "host", "value": "DOAEOA"}, {"name": "thread", "value": "21728-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_orderItem"}]}